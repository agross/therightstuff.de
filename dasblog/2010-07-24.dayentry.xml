<?xml version="1.0" encoding="utf-8"?>
<DayEntry xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:newtelligence-com:dasblog:runtime:data">
  <Date>2010-07-24T02:00:00+02:00</Date>
  <Entries>
    <Entry>
      <Content>&lt;p&gt;I just finished watching &lt;a href="http://weblogs.thinktecture.com/ingo/" rel="contact"&gt;Ingo Rammer&lt;/a&gt;’s sessions on debugging from &lt;a title="Norwegian Developers Conference 2010" href="http://www.ndc2010.no"&gt;NDC 2010&lt;/a&gt;:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a title="Session video" href="http://streaming.ndc2010.no/tcs/?id=B25D60E8-48C1-4514-9276-608859B4CC72"&gt;Advanced Debugging with Visual Studio&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;&lt;a title="Seesion Video" href="http://streaming.ndc2010.no/tcs/?id=7CA2DE20-2C1E-4E15-B962-5A61426B2218"&gt;Hardcore .NET Production Debugging&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;(&lt;a href="http://www.ndc2010.no/index.aspx?id=361621"&gt;All videos are available as a Torrent&lt;/a&gt;) &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;While I consider myself experienced in debugging with Visual Studio I still didn’t know the Ctrl+B trick Ingo shows in the first session to create breakpoint groups, for example to break on all methods named &lt;code&gt;WriteLine&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Ingo’s second session goes into detail how to start with WinDbg. During his talk Ingo wrote down quite a lot of WinDbg commands that I copied and extended a bit for my own reference.&lt;/p&gt;  &lt;pre class="brush: plain;"&gt;# Use debugger according to architecture that is being debugged.

# Drag exe onto WinDbg to start debugging.

# Debugging services:
# 1. Using Global Flags
#  - On &amp;quot;Image File&amp;quot; tab, enter service exe
#  - Set debugger to cdb.exe -server tcp:port=1234
# 2. Start service
# 3. Start WinDbg
#  - connect to remote session: tcp:server=localhost,port=1234
# Also works (unsecured) over networks

!help

.loadby sos mscorwks # CLR 2
.loadby sos clr      # CLR 4, both after the debuggee has loaded the CLR
.chain               # Shows loaded extensions

sxe &amp;lt;event code&amp;gt; # Stop
sxn &amp;lt;event code&amp;gt; # Notify
sxi &amp;lt;event code&amp;gt; # Ignore
# ... on &amp;lt;event code&amp;gt; exceptions (for example, &amp;lt;event code&amp;gt; = clr)

g            # Go
.cls         # Clear screen

!pe          # Print exception
!clrstack    # Display stack trace
!clrstack -a # Stack trace with additional information (parameters and locals)
# If there is no stack information the JIT optimized the code away (i.e. inlining).
!dumpstack   # Another way to get the stack trace

!u &amp;lt;address&amp;gt; # Unassemble code at &amp;lt;address&amp;gt;
# Look for calls into managed code (to the right) to find the line/call that caused the exception.
# &amp;lt;assembly&amp;gt;_ni = Native image

!do &amp;lt;address&amp;gt; # Dump object
!da &amp;lt;address&amp;gt; # Dump array
# To copy addresses: Left double-click a numeric value, double right-click to copy it to the command line.

~            # Show all (managed and unmanaged) threads
!threads     # Show managed threads
~2s          # Switch to thread 2 (#2 in the unnamed column)
!runaway     # Show thread execution times (user-mode) - to find hanging threads

!dumpheap    # Show heap information, 1 line per instance
!dumpheap -stat # Heap statistics, most memory-consuming at the bottom. MT = class &amp;quot;pointer&amp;quot;
!dumpheap -stat -type TextBox # Show instances of classes containing &amp;quot;TextBox&amp;quot;
!dumpheap -type TextBox
!dumpheap -mt &amp;lt;type&amp;gt; # Dumps all instances of &amp;quot;TextBox&amp;quot; or &amp;lt;type&amp;gt;
!gcroot &amp;lt;address&amp;gt; # Why is the instance at &amp;lt;address&amp;gt; in memory?
# Domain = new GC root that reference &amp;lt;address&amp;gt; (~ static instance)
# Ignore WeakReferences, look for (pinned) references

# Create dumps from code:
[DllImport(&amp;quot;DbgHelp.dll&amp;quot;, SetLastError = true]
static extern bool MiniDumpWriteDump(
    IntPtr hProcess,
    int processId,
    IntPtr fileHandle,
    int dumpType, // 0x0 or 0x6 for managed code
    IntPtr exceptionInfo,
    IntPtr userInfo,
    IntPtr extInfo);&lt;/pre&gt;</Content>
      <Created>2010-07-24T22:45:03.5027068+02:00</Created>
      <Modified>2010-07-30T11:08:07.073+02:00</Modified>
      <EntryId>0ecebbc4-ca32-40fc-a28f-914888dd3199</EntryId>
      <Description />
      <Title>WinDbg Commands</Title>
      <Categories>.NET;Debugging</Categories>
      <Author>agross</Author>
      <IsPublic>true</IsPublic>
      <Syndicated>true</Syndicated>
      <ShowOnFrontPage>true</ShowOnFrontPage>
      <AllowComments>true</AllowComments>
      <Attachments />
      <Crossposts />
      <Latitude xsi:nil="true" />
      <Longitude xsi:nil="true" />
    </Entry>
  </Entries>
</DayEntry>